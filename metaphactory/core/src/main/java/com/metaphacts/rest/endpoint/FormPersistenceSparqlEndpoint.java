/*
 * Copyright (C) 2015-2017, metaphacts GmbH
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, you can receive a copy
 * of the GNU Lesser General Public License from http://www.gnu.org/
 */

package com.metaphacts.rest.endpoint;

import java.util.List;

import javax.inject.Inject;
import javax.ws.rs.Consumes;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.shiro.authz.annotation.Logical;
import org.apache.shiro.authz.annotation.RequiresAuthentication;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.eclipse.rdf4j.query.Update;
import org.eclipse.rdf4j.repository.RepositoryConnection;

import com.metaphacts.api.sparql.SparqlOperationBuilder;
import com.metaphacts.repository.RepositoryManager;
import com.metaphacts.security.Permissions.FORMS_SPARQL;

/**
 * @author Johannes Trame <jt@metaphacts.com>
 *
 */
@Path("/sparql")
public class FormPersistenceSparqlEndpoint {
    private static final Logger logger = LogManager.getLogger(FormPersistenceSparqlEndpoint.class);

    @Inject
    private RepositoryManager repositoryManager;

    
    /**
     * Executes and array of SPARQL INSERT and DELETE query strings in one transaction. 
     * 
     * @param deleteAndInserts
     *            An JSON array of SPARQL INSERT and DELETE queries generated by the
     *            client-side form component
     * @return
     */
    @POST
    @RequiresAuthentication
    @Consumes(MediaType.APPLICATION_JSON)
    @RequiresPermissions(value = { FORMS_SPARQL.CREATE, FORMS_SPARQL.UPDATE }, logical = Logical.OR)
    public Response executeUpdates(List<String> deleteAndInserts) {
        logger.debug("Received SPARQL insert and delete queries: {}", deleteAndInserts);
        try {
            try (RepositoryConnection con = repositoryManager.getDefault().getConnection()) {
                con.begin();
                try{
                    for (String updateString : deleteAndInserts) {
                        Update update = SparqlOperationBuilder.<Update>create(updateString, Update.class).build(con);
                        update.execute();
                    }
                    con.commit();
                }catch(Exception e){
                    con.rollback();
                    throw e;
                }
                
            }
            return Response.ok().build();
        } catch (Exception e) {
            logger.error("Error while executing SPARQL updates for forms: {} ", e.getMessage());
            logger.debug("Details: {} ", e);
            return Response.serverError().entity(e.getMessage()).build();
        }
    }

}